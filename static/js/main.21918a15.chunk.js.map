{"version":3,"sources":["serviceWorker.js","services/PlayService.js","components/SoundComponent.js","index.js","services/SoundIndexService.js"],"names":["Boolean","window","location","hostname","match","sounds","Map","pause","key","has","get","SoundComp","className","this","props","metadata","artist","title","album","onClick","url","audio","Audio","set","play","ps","currentTime","React","Component","Combiner","state","soundsData","renderData","map","data","idx","length","fetch","then","response","json","resJson","sort","l","r","artCmp","localeCompare","catch","error","console","setState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCjBN,IAAIC,EAAS,IAAIC,IAWJC,EAAQ,SAACC,GACfH,EAAOI,IAAID,IACVH,EAAOK,IAAIF,GAAKD,SCMTI,E,uKAdH,IAAD,OACL,OACE,yBAAKC,UAAU,UACb,2BAAIC,KAAKC,MAAMC,SAASC,OAAxB,MAAmCH,KAAKC,MAAMC,SAASE,MAAvD,KAAgEJ,KAAKC,MAAMC,SAASG,MAApF,KACA,4BAAQC,QAAS,kBDPP,SAACX,EAAKY,GACtB,IAAIC,EAAQhB,EAAOK,IAAIF,GAKvB,OAJIa,IACAA,EAAQ,IAAIC,MAAMF,GAClBf,EAAOkB,IAAIf,EAAKa,IAEbA,EAAMG,OCCgBC,CAAQ,EAAKX,MAAMC,SAASK,IAAK,EAAKN,MAAMC,SAASK,OAA5E,QACA,4BAAQD,QAAS,kBAAMM,EAAS,EAAKX,MAAMC,SAASK,OAApD,SACA,4BAAQD,QAAS,kBDMNX,ECNoB,EAAKM,MAAMC,SAASK,SDOtDf,EAAOI,IAAID,KACVD,EAAMC,GACNH,EAAOK,IAAIF,GAAKkB,YAAc,IAHlB,IAAClB,ICNX,a,GARcmB,IAAMC,WCMxBC,E,kDAEJ,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACXC,WAAY,IAHG,E,qDAQjB,IAAIC,EAAanB,KAAKiB,MAAMC,WACzBE,KAAI,SAACC,EAAMC,GAAP,OAAe,kBAAC,EAAD,CAAW3B,IAAK2B,EAAKpB,SAAUmB,OAKrD,OAHyB,IAAtBF,EAAWI,SACZJ,EAAa,wDAGb,6BACE,6CACA,6BACGA,M,0CAMY,IAAD,OCjCXK,MAHa,8CAIfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAO,OAAIA,EAAQ1B,SAAS2B,MAAK,SAACC,EAAEC,GAClC,IAAIC,EAASF,EAAE3B,OAAO8B,cAAcF,EAAE5B,QACtC,OAAkB,IAAX6B,EAAeA,EAASF,EAAE1B,MAAM6B,cAAcF,EAAE3B,aAG9D8B,OAAM,SAAAC,GAEL,OADAC,QAAQD,MAAR,kDAAyDA,IAClD,MD0BVV,MAAK,SAACJ,GAAD,OAAU,EAAKgB,SAAS,CAACnB,WAAYG,W,GA5B1BP,IAAMC,WAkC7BuB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SHqFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdZ,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMY,a","file":"static/js/main.21918a15.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nvar sounds = new Map()\n\nexport const play = (key, url) => {\n    var audio = sounds.get(key)\n    if(!audio) {\n        audio = new Audio(url)\n        sounds.set(key, audio)\n    }\n    return audio.play()\n}\n\nexport const pause = (key) => {\n    if(sounds.has(key)) {\n        sounds.get(key).pause()\n    }\n}\n\nexport const stop = (key) => {\n    if(sounds.has(key)) {\n        pause(key)\n        sounds.get(key).currentTime = 0\n    }\n}\n","import React from 'react';\n\nimport * as ps from '../services/PlayService'\n\nclass SoundComp extends React.Component {\n\n  render() {\n      return (\n        <div className=\"sounds\">\n          <p>{this.props.metadata.artist} - {this.props.metadata.title} ({this.props.metadata.album})</p>\n          <button onClick={() => ps.play(this.props.metadata.url, this.props.metadata.url)}>Play</button>\n          <button onClick={() => ps.pause(this.props.metadata.url)}>Pause</button>\n          <button onClick={() => ps.stop(this.props.metadata.url)}>Stop</button>\n        </div>\n      );\n  }\n}\n\n\n\nexport default SoundComp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport SoundComp from './components/SoundComponent'\nimport * as sis from './services/SoundIndexService'\n\n\nclass Combiner extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      soundsData: [],\n    }\n  }\n\n  render() {\n    var renderData = this.state.soundsData\n      .map((data, idx) => <SoundComp key={idx} metadata={data}/>)\n\n    if(renderData.length === 0) {\n      renderData = <p>No sounds to display ...</p>\n    }\n    return (\n      <div>\n        <h1>Soundboard :D</h1>\n        <div>\n          {renderData}\n        </div>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    sis.fetchSoundIndex()\n      .then((data) => this.setState({soundsData: data}))\n  }\n  \n}\n\n\nReactDOM.render(\n  <Combiner/>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const SOUND_INDEX_URL = \"http://localhost:8080/data/soundindex.json\"\n\nexport const fetchSoundIndex = () => {\n    return fetch(SOUND_INDEX_URL)\n        .then(response => response.json())\n        .then(resJson => resJson.metadata.sort((l,r) => {\n                var artCmp = l.artist.localeCompare(r.artist)\n                return artCmp !== 0 ? artCmp : l.title.localeCompare(r.title)\n            })\n        )\n        .catch(error => {\n          console.error(`Failed to fetch sound-data from server: ${error}`);\n          return []\n        })\n}"],"sourceRoot":""}